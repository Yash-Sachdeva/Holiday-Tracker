package com.example.demo;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
public class SecurityConfig {

    @Bean
    public UserDetailsService userDetailsService() {
        return new InMemoryUserDetailsManager(); // Later replace with database authentication
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();  // Encrypt passwords before saving
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())  // Disable CSRF for simplicity (enable in production)
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/auth/register/**").permitAll() // Public access for registration
                .requestMatchers("/auth/login/**").permitAll() // Public access for login
                .requestMatchers("/employee/**").hasRole("EMPLOYEE") // Only Employee can access
                .requestMatchers("/hr/**").hasRole("HR") // Only HR can access
                .requestMatchers("/superhr/**").hasRole("SUPER_HR") // Only Super HR can access
                .requestMatchers("/client/**").hasRole("CLIENT") // Only Client can access
                .anyRequest().authenticated() // All other requests need authentication
            )
            .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .httpBasic(withDefaults()); // Basic authentication (replace with JWT later)

        return http.build();
    }
}
