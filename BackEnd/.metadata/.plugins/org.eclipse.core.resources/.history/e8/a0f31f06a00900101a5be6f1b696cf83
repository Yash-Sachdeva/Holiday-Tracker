package com.example.demo.controller;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.example.demo.dto.LoginDTO;
import com.example.demo.entities.Employee;
import com.example.demo.service.EmployeeService;

@RestController
@RequestMapping("/auth")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    // Employee Registration
    @PostMapping("/register/employee")
    public Employee registerEmployee(@RequestBody Employee employee) {
        return employeeService.registerEmployee(employee);
    }

    // Employee Login - Uses Session
    @PostMapping("/login")
    public String loginEmployee(@RequestBody LoginDTO loginDTO, HttpServletRequest request) {
        Employee employee = employeeService.authenticate(loginDTO.getEmail(), loginDTO.getPassword());

        if (employee != null) {
            HttpSession session = request.getSession(true); // Create a session
            session.setAttribute("user", employee); // Store user in session
            return "Login successful!";
        } else {
            return "Invalid email or password";
        }
    }

    // Check if user is logged in
    @GetMapping("/session")
    public String checkSession(HttpSession session) {
        Employee user = (Employee) session.getAttribute("user");
        if (user != null) {
            return "User is logged in: " + user.getEmail();
        } else {
            return "No active session found";
        }
    }

    // Employee Logout - Ends Session
    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate(); // Destroy session
        return "Logged out successfully";
    }

    // Get Employee by Email (Protected API)
    @GetMapping("/employee/{email}")
    public Employee getEmployeeByEmail(@PathVariable String email, HttpSession session) {
        Employee user = (Employee) session.getAttribute("user");
        if (user != null) {
            return employeeService.getEmployeeByEmail(email);
        } else {
            return null; // Or throw an error that user is not authenticated
        }
    }
}
