package com.example.demo.controller;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.dto.EmployeeDTO;
import com.example.demo.dto.LoginDTO;
import com.example.demo.dto.ResponseDTO;
import com.example.demo.entities.Employee;
import com.example.demo.service.EmployeeService;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/employees") // More RESTful naming
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    // 游릭 **Register Employee (Only HR Allowed)**
    @PostMapping("/register")
    public ResponseEntity<ResponseDTO> registerEmployee(HttpSession session, @RequestBody EmployeeDTO employeeDTO) {
        String role = (String) session.getAttribute("role");

        if (!"HR".equalsIgnoreCase(role)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ResponseDTO("You do not have authorization to add an employee"));
        }

        employeeService.registerEmployee(employeeDTO);
        return ResponseEntity.ok(new ResponseDTO("Employee registered successfully"));
    }

    // 游릭 **Employee Login**
    @PostMapping("/login")
    public ResponseEntity<ResponseDTO> loginEmployee(@RequestBody LoginDTO loginDTO, HttpServletRequest request) {
        Optional<Employee> employeeOpt = employeeService.authenticate(loginDTO.getEmail(), loginDTO.getPassword());

        if (employeeOpt.isPresent()) {
            Employee employee = employeeOpt.get();
            HttpSession session = request.getSession(true);
            session.setAttribute("user", employee);
            session.setAttribute("role", employee.getRole());

            return ResponseEntity.ok(new ResponseDTO("Login successful"));
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new ResponseDTO("Invalid email or password"));
    }

    // 游릭 **Check Active Session**
    @GetMapping("/session")
    public ResponseEntity<ResponseDTO> checkSession(HttpSession session) {
        Employee user = (Employee) session.getAttribute("user");

        if (user != null) {
            return ResponseEntity.ok(new ResponseDTO("User is logged in: " + user.getEmail()));
        }
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new ResponseDTO("No active session found"));
    }

    // 游릭 **Logout Employee**
    @PostMapping("/logout")
    public ResponseEntity<ResponseDTO> logout(HttpSession session) {
        session.invalidate();
        return ResponseEntity.ok(new ResponseDTO("Logged out successfully"));
    }

    // 游릭 **Get Employee by Email**
    @GetMapping("/{email}")
    public ResponseEntity<?> getEmployeeByEmail(@PathVariable String email, HttpSession session) {
        Employee user = (Employee) session.getAttribute("user");

        if (user == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new ResponseDTO("No active session found"));
        }

        Optional<EmployeeDTO> employeeDTO = employeeService.getEmployeeByEmail(email);
        return employeeDTO.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ResponseDTO("Employee not found")));
    }

    // 游릭 **Update Employee (Only HR Allowed)**
    @PutMapping("/update")
    public ResponseEntity<ResponseDTO> updateEmployee(HttpSession session, @RequestBody EmployeeDTO employeeDTO) {
        String role = (String) session.getAttribute("role");

        if (!"HR".equalsIgnoreCase(role)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ResponseDTO("You do not have authorization to update an employee"));
        }

        employeeService.updateEmployee(employeeDTO);
        return ResponseEntity.ok(new ResponseDTO("Employee updated successfully"));
    }

    // 游릭 **Get All Employees**
    @GetMapping("/all")
    public ResponseEntity<List<EmployeeDTO>> getAllEmployees(HttpSession session) {
        Employee user = (Employee) session.getAttribute("user");

        if (user == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        return ResponseEntity.ok(employeeService.getAllEmployees());
    }
}
